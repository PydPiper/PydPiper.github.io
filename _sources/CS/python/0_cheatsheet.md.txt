# Python Cheat Sheet

A collection of miscellaneous python how-to's that often times were buried in pages of stackoverflow, git issues or just cool work around to common issues within a project.


## How to build python from source

On windows/linux from .tgz
```shell
tar xvf Python-3.9.6.tgz
cd Python Python-3.9.6
./configure
make
python -m ensurepip --upgrade
```


## What is Mutable/Immutable

- Mutable: An object that can be changed after it is created

    - list, set, dict

```python

    a = [1,2,3]
    id(a)
    >>> 63674848
    a.append(4)
    id(a)
    >>> 63674848 # note that the ID stays the same, however the content of the list changed
```

- Immutable: An object that cannot be changed after it is created

    - bool, int, float, str, tuple, frozenset

```python

    # same ID every time you call id on a bool, int, float, str
    id(123)
    >>> 1794170960
    a = (1,2,3)
    id(a)
    >>> 69202848 # now note once you change the tuple size the ID rolls
    a += (4,)
    id(a)
    >>> 65455520 # new id
```

## All about Copy: True/Shallow/Deep

There are 3 different ways to copy objects in python:

- **True Copy**: ID or old object and new object are the **same**, therefore changing one object
  also changes the other

- **Shallow Copy**: ID of old object and new object is **different**, therefore the number of contents
  and immutable contents can be changed by one that will not effect the other, HOWEVER mutable content copied
  are still linked between the two objects (ie: a = [[1,2],3], copy_a = [[1,2],3] the list [1,2] inside is the
  same ID, therefore changing the list in "a" will also change the list in "copy_a"

- **Deep Copy**: creates **new** IDs for each object within (very slow!). There is no link between old and new copy


## How to set a environment variable within python
This will set the environment variable for this python process only. This is also great for temporarily setting up variables for testing.

```python
import os
os.environ['USER'] = 'Viktor Kis'
```

## How to split a string based on 1st delimiter only

```python
'this.is.text'.split('.',1)
>>> ['this', 'is.text']
```

## How to Single line logic check

```python
b = -5
a = 5 if b < 0 else 10
a
>>> 5
```


## How to find out a scripts performance

```shell
python -m cProfile -s time filename.py
```

## How to get a object's attribute and set to default if there is none

```python
class Test():
    def __init__(self):
        self.A = 0
test = Test()
a = getattr(test,'A',10)
a
>>> 0
b = getattr(test,'B',20)
b
>>> 20
```

## How to hide print statements

```python
import sys
class HiddenPrints:
    def __entr__(self):
        self._original_stdout = sys.stdout
        sys.stdout = open(os.devnull, 'w')
    def __exit__(self, exc_type, exc_val, exc_tb):
        sys.stdout.close()
        sys.stdout = self._original_stdout

def hello():
    print('hello')
hello()
>>> 'hello'

@HiddenPrints
def hello2():
    print('hello')
hello2()
```

## How to setup multiprocessing
Note that for pyinstaller you do have to pass all import functions along with the multiprocess as well (for example if you are using math.cos() you will need to pass the function cos() along as a arg into the Process for it to use it within a new process with pyinstaller).

```python
from multiprocessing import Queue, Process

def adder(a,b):
    rv = []
    for i in range(0,1000):
        rv.extend([i,a+b])
    return rv

if __name__ == '__main__':
    q1 = Queue()
    q2 = Queue()

    p1 = Process(target=adder, args=(1,2))
    p2 = Process(target=adder, args=(1,2))
    
    p1.start()
    p2.start()

    print(q1.get(), q2.get())

    p1.join()
    p2.join()
```

## How to create a Context Manager

Context Manager is a function or class that has an "Enter" buildup code, and an
"Exit" teardown code that the user is able simply call in a "with" block. The most
common example of this is the builtin file IO class "open". Open has an "Enter" that
opens file streaming and an "Exit" that safely closes the file for streaming.

### Object Oriented Version

- Setup

```python

    # context manager setup
    class MyContextManager():

        # predefine input on "with" code line
        def __init__(self, preload):
            print("context initialized on runtime")
            self.preload = preload

        # enter method is called when the code enters the with block
        def __enter__(self):
            print("inside with block")
            # keep the context manager class simple
            #   by returning another class that does the work from the __enter__ block
            # When a "with MyContextManger(10) mycont:" is called,
            #   we are really saying that mycont = worker_class(10)
            return worker_class(self.preload)

        # exit method is called when the code exits the with block
        def __exit__(self, exc_type,exc_val, exc_tb):
            # exc_type ==> exception type (ie. TypeError, ValueError, KeyError)
            # exc_val  ==> raise exception argument (ie. TypeError("this is the exc_val"))
            # exc_tb   ==> traceback message (where the in the code did the exception occur)

            # exit method receives arg containing details of exception raised in the "with" block
            #   if context can handlethe exception, __exit__() should return a true
            #   (ie. error does not need to be propagated)
            #   returning false causes the exception to be re-raised after __exit__()

            # this feature is really nice when trying to graciously handle exceptions
            if exc_type is ValueError:
                print("handled ValueError, raised exception value = ",exc_val)
                return True
            return False
```

- Extend the context manger functionality

```python

    # define worker class
    class worker_class():
        def __init__(self, preload):
            self.preload = preload
        def extended(self, val):
            print(val, self.preload)
```

- How to use it

```python

    # now to use it
    with MyContextManager(10) as mycont:
        # code without any errors
        mycont.extended(100)

    >>> "context initialized on runtime"
    >>> "inside with block"
    >>> 100, 10

    # how it works with handled error
    with MyContextManager(10) as mycont:
        # code without any errors
        mycont.extended(100)
        raise ValueError("HI!")

    >>> "context initialized on runtime"
    >>> "inside with block"
    >>> 100, 10
    >>> "handled ValueError, raised exception value =  HI!"
```

### Functional Programming Version
We can accomplish the same task with a function definition as shown above and a library called
contextlib

- Define the worker class (same as above, this does not have to be a class object, this example
  is simply reusing the same code as above for clarity)

```python

    # define worker class (same as above)
    class worker_class():
        def __init__(self, preload):
            self.preload = preload
        def extended(self, val):
            print(val, self.preload)
```

- Setup the context manager function

```python

    from contextlib import contextmanager

    @contextmanager
    def MyContextManager(preload):
        # __init__ code goes here
        print("context initialized on runtime")
        try:
            print("inside with block")
            yield worker_class(preload)
        except ValueError as e:
            print("handled ValueError, raised exception value = ",e)
        finally:
            # __exit__ code goes here
            print("__exit__ cleanup code goes here")
```

- Use it

```python

    with MyContextManager(10) as mycont:
        # code without any errors
        mycont.extended(100)

    >>> "context initialized on runtime"
    >>> "inside with block"
    >>> 100, 10
    >>> "__exit__ cleanup code goes here"
```

## How to get User Inputs

### Runtime Inputs


```python

    # python3: runtime input (stops your code and waits for a user input)
    store = input("Text asking for input: ")
```

- python hack for "switch" statement

```python

    # python doesnt have a "switch" keyword function builtin, but you are given the power to forge one!
    #   lets say you have multiple options on input
    print("Options:\n"
          "1) Main Menu\n"
          "2) Names\n"
          "3) Addresses\n")
    # functions that handle each menu:
    def main_menu():
        pass
    def names():
        pass
    def addresses():
        pass
    # switch statement to pipe the inputs
    piper = {"1": main_menu,
             "2": names,
             "3": addresses}
    # the dict stores the function objects, and piper[input]() then calls the function upon valid input
    piper.get([input("Enter option 1, 2, or 3: ")], "Invalid Input")()
```

### Commandline Inputs


```python

    # ask for user inputs when calling the script
    #   note that sys.argv[0] is the name of the script (in this example "script.py")

    # access argument via sys
    import sys

    # we are looking for 3 inputs, else give guidance for proper input format
    if len(sys.argv) == (1+3):
        name_first = sys.argv[1]
        name_last = sys.argv[2]
        age = sys.argv[3]
    else:
        print("Script Usage:\n"
              "script.py arg1 arg2 arg3\n"
              "where,\n'
              "arg1 == First name\n"
              "arg2 == Last name\n"
              "arg3 == age\n")
```

## What is a compiled python file .pyc

For performance reasons you python by default compiles the bytecode into .pyc binary. 

- how to compile/de-compile manually

```shell
python -m py_compile file.py
pip install decompyle6
decompyle6 file.pyc > file.py
```

## How to check python version within python

```python
import sys
sys.version_info
```

## How to unpack only items you want on a return statement

``` python
# get only 1st 3rd and ignore the rest of the args
a, _, b, *_ = [1,2,3,4,5,6,7,8]
```

## How to use python debugger (pdb)

- execute your code via pdb: `python -m pdb file.py`

- insert a breakpoint into your script via `import pdb` then `pdb.set_trace()` above the line you would like to break at

- jump to next line `n`

- jump to next breakpoint `x`


## How to run another python script within a python script (subprocess)

```python
import subprocess

subprocess.run("python script.py")
```

## How to scrape a website

```python
import requests
from bs4 import BeautifulSoup as bs

# query the raw html tags
url = 'https://google.com'
response = requests.get(url)
soup = bs(response.content, 'html.parser')
# get a html tag, you can also find on id=
tag = soup.find('div', class_='classname')
# get its text
tag.text

# query an API's json response
url = 'https://api.opensea.io/collection/lazy-lions'
response = requests.get(url)
data = response.json()

# you can also send specific information to an api to get a response with, ex: google maps api
url = 'http://maps.googleapis.com/maps/api/directions/json'
params = {'origin':'Seattle, WA', 'destination': 'Everett, WA'}
response = requests.get(url, params=params)
data = response.json()

# note that some site require javascript to render the full page, currently there is no way to parse these
# with just python alone, you would need to use a headless terminal like phantomjs
```

---

## References

1. Python Software Foundation, "Python3.9.7 Documentation" www.python.org (accessed Sep. 25 2021)
