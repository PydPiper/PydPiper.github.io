# lib - Testing (unittest/pytest)

The concept of writing code to test code can be a bit bizarre at first, but the idea is to test the behavior of a function or integration of functions with a set of inputs that have a known
desired output value (ie. add 1 + 3; the inputs are 1 and 3, and we know that the correct answer should be 4).

Why write tests:

- Code reliability. Does the code work the way it is was intended?
- Code maintainability. During refactoring or feature addition/removal does the code still do
  what it was supposed to do?
- Code longevity. During version updates, outputs of dependent packages can change. A properly tested
  code will ensure that all outputs of dependent packages still work for your code.
- Tested code will yield cleaner code as well. It will be come very apparent in practice
  that a single function that does everything will be much hard to test (and read) than that same code refactored
  into many smaller functions with explicit output.


## Setup your first test

To make life easy, place your tests in a "test_" file, this will make it so that tools like unittest/pytest can easily detect your test files.

1) Write your source code that you want to test.

```{code-block} python
:caption: mycode.py

def adder(x,y):
    return x + y
```

2) Write your test. You can find the full list of `assertions` at [Python.org](https://docs.python.org/3/library/2to3.html?highlight=assert#2to3fixer-asserts)

```{code-block} python
:caption: test_mycode.py

# import the builtin test library
import unittest
# import your code module (mycode.py, assuming both mycode.py and test_myode.py are in the same folder)
import mycode

# setup the test class
class test_mycode(unittest.TestCase):

    # setUp is optional: but if you are re-using inputs this saves you from retyping them in each test (this is most useful when reading in a file, you would)
    def setUp(self):
        self.input1 = 10
        self.input2 = 20

    # pytest looks for all methods that start with "test_"
    def test_one(self):
        # there are many different asserts, see full list above
        #  here we are testing if our function "adder" adds 10+20 correctly and equals 30
        self.assertEqual(30,mycode.adder(10,20))

    # we can write as many tests as we like,
    #   here is the same test input/out but with our setUp variables
    def test_two(self):
        self.assertEqual(30,mycode.adder(self.input1,self.input2))
```

3) To run pytest, we type the following in the terminal

```shell
python -m pip install pytest pytest-cov
python -m pytest --cov-report=html --cov='.'
```

4) The output will look something like:

```shell
============================= test session starts =============================
platform win32 -- Python 3.8.0, pytest-5.2.2, py-1.8.0, pluggy-0.13.0
rootdir: C:\Users\yourusername\Desktop
collected 2 items

test_mycode.py ..                                                        [100%]

============================== 2 passed in 0.03s ==============================
```

## How to run a test 1 specific test within a test file

```shell
python -m pytest test_mycode.py::test_mycode::test_one
```

## How to check if a function raises an error

Reusing the same example from ``mycode.py``

```{code-block} python
:caption: test_mycode.py

import unittest
import mycode

class test_mycode(unittest.TestCase):

    def test_error(self):
        # to test a error raise, we have to enclose the code being testing a "with" block
        #  here we are testing if our code raises a TypeError when adding 10 + "20" as it should
        with self.assertRaises(TypeError):
            mycode.adder(10,"20")
```

## How to report out code test coverage

Code test coverage writes out a detailed report on what percent of your code the test actually executed.

```shell
python -m pytest --cov-report=html --cov='.'
```

You can also write out a single ``xml`` coverage file. This is useful for CI (continuous integration)
since you only have to point your upload/file to 1 file.

```shell
python -m pytest --cov-report=xml --cov='.'
```

## How To file-read without an actual file

```python
f = io.StringIO("text\n")

f.readline()
>>> "text"
```

## How to mock a function call for testing

Note you have you `pip install mock` in order to use in as an addon to unittest

```{code-block} python
:caption: source code

def get_sign(a):
    pass

def badadder(a,b):
    sign = get_sign(a)
    return sign * a + b
```

```{code-block} python
:caption: test code

from unittest import TestCase, mock
import source

class TestAdder(TestCase):
    def test_badadder(self):
        # lets say we didnt want to actually call the get_sign() function but instead override it
        with mock.patch('source.get_sign', return_value=-1):
            result = source.badadder(-1,2)
        self.assertEqual(3, result)
```

## How to mock request responses

```{code-block} python
:caption: source code

import requests

def get_response(url):
    r = requests.get(url)
    if r.status_code == 200:
        return r.json()
    else:
        raise UserWarning('Bad Response')
```

```{code-block} python
:caption: test code

from unittest import TestCase, mock

class TestResponse(TestCase):
    def test_get_response(self):
        # create a fake request
        with mock.patch('source.requests') as req_mock:
            # create a fake response
            r = mock.Mock()
            r.status_code = 200
            r.json.return_value = {'name': 'Vik'}
            # set the .get to return the fake response
            req_mock.get.return_value = r
            self.assertEqual({'name': 'Vik'}, source.get_response(''))
```

## How to Write Tests That Read/Write Files

It is a common issue to run into `FileNotFoundError` when running tests from different directories. An easy safeguard around it is to temporarily change the working directory:

```python
import unittest
import os

class MyTest(unittest.TestCase):
    def test_one():
        # log the cwd
        wd = os.getcwd()
        # change the wd to be the same as the test folder
        os.chdir(os.path.dirname(os.path.abspath(__file__)))
        # your file read within the test dir now works no matter where you started the test
        with open('file.txt', 'r') as f:
            data = f.read()
        # change the wb back
        os.chdir(wd)
```

---

## References

1. Python Software Foundation, "Python3.9.7 Documentation" www.python.org (accessed Sep. 25 2021)