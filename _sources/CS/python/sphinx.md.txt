# lib - sphinx (Python Documentation)

## Setting up a Sphinx Doc

1) Install and start sphinx

```shell
pip install sphinx sphinx_rtd_theme myst-parser
sphinx-quickstart
```

2) Adjust `source/config.py` to use sphinx_rtd_theme, auto code docstring, and allow to use markdown (instead of the default rst)

```python
# add your project path to your doc (assuming your structure is project/doc and project/source)
import os, sys
sys.path.append('../../')

# ability to use autodocs
extensions = ['sphinx.ext.autodoc', 'myst_parser']
source_suffix = {
    '.rst': 'restructuredtext',
    '.md': 'markdown',
}
autodoc_default_options = {
    'member-order': 'bysource',
    'special-members': '__init__',
}

# use a new theme
html_theme = 'sphinx_rtd_theme'
```

3) Generate your docs

```shell
docs/make.bat html
```

4) Rules

- source must have a `index.rst` with a `toctree`. Note you main call an subfolder/index with an index

```
max depth is how far the nav tree with have expandable buttons
glob lets you include an entire folder of files
hidden hides the tree in the main body

.. toctree::
    :maxdepth: 3
    :glob:
    :hidden:

    file
    folder/file
    folder/*
```

- each file must start with a header (in `.rst` underscore with ====, in `.md` leading "#")


### How to create autodocs

- make sure your docstring follows the format of

```python
def func(arg1, arg2):
    """
    Description, followed by empty line

    :param str arg1: this is arg1
    :param float arg2: this is arg2
    :return bool: this is return description
    """
```

```
.. autofuction:: filename.functionname

.. autoclass:: filename.classname
    :members:

.. automodule:: filename
    :members:
```

### How to ignore certain imports that are causing issue with doc generation

add the following to your config.py

```python
autodoc_mock_imports = ['numpy', 'pandas']
```

### myst-parse tricks

You can write normal markdown that sphinx can consume, however certain things are not native to markdown:

**note the following examples are enclosed by 3x "`"**

- how to create a notebox

```
.. {note} 
this is a note
```

- code block manipulation

```
---
:linenos:
:emphasize-lines: 1, 3
---
```

## ReStructuredText (rst)

- To italicize text: `*text*`
- To bold text: `**text**`
- Subscript/Superscript: ``:sub:`yourtext` `` or ``:sup:`yourtext` ``
- To in-text code highlight:  `` `your text then` ``
- Important messages: ``.. note::`` ``.. warning::`` ``.. deprecated::`` ``.. seealso::``
- Internal Links: ``:doc:`filename` ``
- External Links: ``linktext <https://google.com>`_``
- Section Links within the same doc

    1) put a ``.. _ref1:`` above the header you want to ref (make sure there is an empty line between the header and _ref1)

    2) call the link by: ``:ref:`ref1` ``

- Citations: to define it ``.. [refname1] Title`` then to use it in text: ``[refname1]_``
- Today's date in text ``|today|``
- Bullets, there are a few not so intuitive conventions about bullets, see below:

```

    - this is a bullet

    - this is another bullet

    - this is a bullet
    on multi lines

    1) this is a numbered bullet

        1.1) this is a nested bullet
        with multi lines

        1.2) here is another nested bullet
```

- Header Types
    - Title: `###`
    - Section: `===`
    - SubSection: `---`
    - 2SubSection: `^^^`
    - 3SubSection: `"""`

- Figures

```
.. code-block:: text

    .. figure:: pic.png
        :scale: 50%
        :alt: Alternative text if image does not load, spoken by application for visually impaired
        :align: center

        This is caption text
```

## How to hyperlink to other python package code:

```{code-block} python
:caption: config.py

extensions = [
    'sphinx.ext.intersphinx',
]
intersphinx_mapping = {
    'python': ('https://docs.python.org/3', None),
    'numpy': ('https://numpy.org/doc/stable/', None),
    'pandas': ('https://pandas.pydata.org/pandas-docs/stable', None),
    'scipy': ('https://docs.scipy.org/doc/scipy', None),
    'scipy-lecture-notes': ('https://scipy-lectures.org', None),
    'matplotlib': ('https://matplotlib.org/stable', None),
}
```

In your documentation you refernce code by either `py:class` or `py:func` then the name of the reference the same way as you would import the function/class.

```{code-block}
:caption: mynotes.md
:lineno-start: 1

{py:class}`list`
{py:func}`numpy.cross`
{py:func}`numpy.array`
```


---

## References

1. Sphinx, "Sphinx Documentation" https://www.sphinx-doc.org (accessed Oct. 29 2021)

2. Myst-Parse, "Myst-Parse Documentation" https://myst-parser.readthedocs.io (accessed Oct. 29 2021)