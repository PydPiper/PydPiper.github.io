# Data Types

General Notes:
- By default all variables are immutable, you have to explicitly state `let mut ...` 


## Boolean

Mutable / Immutable
```rust
// immutable 
let mybool1: bool = true;

// mutable
let mut mybool2: bool = true;
mybool2 = false;
```

## Integers/Floats

Mutable / Immutable
```rust
// without "mut" a primitive is immutable
let myint1: i32 = 0;
// this code errors because myint is immutable
myint1 += 1;

// this is a mutable int
let mut myint2: i32 = 0;
myint2 += 1;


Pointer and de-referencing
```rust
// this is a pointer to myint2, thus it shares memory
let myint3: &i32 = &myint2;
// this code error because a pointer is immutable by default
myint3 += 1;

// what you can do is de-reference the pointer with *
// NOTE however arithmetic operation is Rust by default auto-dereference so * here is redundant (but explicit)
let myint4: i32 = *myint3 + 1;

// all the same for floats as ints, for example
let pi: f32 = 3.14;
```